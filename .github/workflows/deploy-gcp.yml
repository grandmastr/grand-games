name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: game-collection
  REGION: us-central1

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 1

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
                     -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
        
    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 80 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production \
          --tag $GITHUB_SHA
          
    - name: Get Service URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region $REGION \
          --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Service deployed at: $SERVICE_URL"
        
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Preview Ready!**
            
            📱 **Game Collection URL:** ${{ steps.service-url.outputs.url }}
            🏷️ **Version:** \`${{ github.sha }}\`
            ⏰ **Deployed at:** ${new Date().toLocaleString()}
            
            Games available:
            - 🐍 Snake Game
            - 🎈 Water Balloon Game  
            - 🧩 Copilot Tetris
            `
          })

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Clean up old container images
      continue-on-error: true
      run: |
        # Keep only the 5 most recent images
        gcloud container images list-tags gcr.io/$PROJECT_ID/$SERVICE_NAME \
          --sort-by=~TIMESTAMP \
          --limit=999 \
          --format="get(digest)" | tail -n +6 | \
        while read digest; do
          gcloud container images delete gcr.io/$PROJECT_ID/$SERVICE_NAME@$digest --quiet
        done
