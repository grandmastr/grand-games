# Project Intelligence: React Games Collection

## Project Structure
- Game components are stored in `src/components/`
- Each game has its own TypeScript component file (e.g., `WaterBalloonGame.tsx`)
- CSS files are paired with their respective components (e.g., `WaterBalloonGame.css`)
- The main application entry point is in `src/App.tsx`

## Code Patterns
- Functional components with React hooks are preferred over class components
- TypeScript interfaces are used to define game element types
- Game state is managed with useState hooks
- Game loops are implemented with useEffect and setInterval
- Event listeners are properly cleaned up in useEffect return functions
- Local storage is used for persisting game data

## Naming Conventions
- Component files use PascalCase (e.g., `WaterBalloonGame.tsx`)
- CSS files match their component names (e.g., `WaterBalloonGame.css`)
- Interface names use PascalCase (e.g., `WaterBalloon`, `Target`, `GameRecord`)
- Constants use UPPER_SNAKE_CASE (e.g., `GRID_SIZE`, `CELL_SIZE`)
- Functions and variables use camelCase (e.g., `playerPosition`, `handleKeyDown`)

## Game Implementation Patterns
- Grid-based games use a div grid with CSS for positioning
- Game elements are represented as objects with x,y coordinates
- Collision detection is done by comparing element coordinates
- Game completion is checked after state updates
- Game records are saved to localStorage with a game-specific key

## User Preferences
- Games should have intuitive controls (arrow keys, space bar)
- Visual feedback is important for game actions
- Game statistics and history should be accessible
- Games should be easy to reset and replay

## Known Challenges
- Balancing game difficulty
- Ensuring consistent performance across browsers
- Handling different screen sizes
- Implementing touch controls for mobile devices

## Development Workflow
- New features should be implemented incrementally
- Game mechanics should be tested thoroughly
- CSS should be modular and component-specific
- TypeScript types should be used consistently
